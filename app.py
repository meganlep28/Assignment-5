{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.express as px\n",
    "from dash import Dash, dcc, html, Input, Output, callback\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       country  1800  1801  1802  1803  1804  1805  1806  1807  1808  ...  \\\n",
      "0  Afghanistan   599   599   599   599   599   599   599   599   599  ...   \n",
      "1       Angola   465   466   469   471   472   475   477   479   481  ...   \n",
      "2      Albania   585   587   588   590   592   593   595   597   598  ...   \n",
      "3      Andorra  1710  1710  1710  1720  1720  1720  1730  1730  1730  ...   \n",
      "4          UAE  1420  1430  1430  1440  1450  1450  1460  1460  1470  ...   \n",
      "\n",
      "    2091   2092   2093   2094   2095   2096   2097   2098   2099   2100  \n",
      "0   4800   4910   5030   5150   5270   5390   5520   5650   5780   5920  \n",
      "1  24.8k  25.3k  25.9k  26.4k  26.9k  27.4k    28k  28.5k  29.1k  29.6k  \n",
      "2    54k  54.6k  55.2k  55.8k  56.4k  56.9k  57.5k  58.1k  58.7k  59.2k  \n",
      "3  79.3k  79.5k  79.8k  80.1k  80.4k  80.7k    81k  81.2k  81.5k  81.8k  \n",
      "4  92.5k  92.6k  92.6k  92.7k  92.8k  92.9k  92.9k    93k  93.1k  93.1k  \n",
      "\n",
      "[5 rows x 302 columns]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>year</th>\n",
       "      <th>gdp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>1800</td>\n",
       "      <td>599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Angola</td>\n",
       "      <td>1800</td>\n",
       "      <td>465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albania</td>\n",
       "      <td>1800</td>\n",
       "      <td>585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Andorra</td>\n",
       "      <td>1800</td>\n",
       "      <td>1710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>UAE</td>\n",
       "      <td>1800</td>\n",
       "      <td>1420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>Gambia</td>\n",
       "      <td>1800</td>\n",
       "      <td>991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>Guinea-Bissau</td>\n",
       "      <td>1800</td>\n",
       "      <td>613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>Equatorial Guinea</td>\n",
       "      <td>1800</td>\n",
       "      <td>454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>Greece</td>\n",
       "      <td>1800</td>\n",
       "      <td>1620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>Grenada</td>\n",
       "      <td>1800</td>\n",
       "      <td>1370</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>70 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              country  year   gdp\n",
       "0         Afghanistan  1800   599\n",
       "1              Angola  1800   465\n",
       "2             Albania  1800   585\n",
       "3             Andorra  1800  1710\n",
       "4                 UAE  1800  1420\n",
       "..                ...   ...   ...\n",
       "65             Gambia  1800   991\n",
       "66      Guinea-Bissau  1800   613\n",
       "67  Equatorial Guinea  1800   454\n",
       "68             Greece  1800  1620\n",
       "69            Grenada  1800  1370\n",
       "\n",
       "[70 rows x 3 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#loading the gapminder data\n",
    "df = pd.read_csv(\"gdp_pcap.csv\")\n",
    "\n",
    "#checking data \n",
    "print(df.head())\n",
    "\n",
    "melted_df = pd.melt(df, id_vars=['country'], var_name='year', value_name='gdp')\n",
    "\n",
    "#check and displays df that has all the countries within a year --> year has separate col\n",
    "melted_df.head(70)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1800\n",
      "2100\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "min_year = int(melted_df[\"year\"].min())\n",
    "print(min_year)\n",
    "\n",
    "max_year = int(melted_df[\"year\"].max())\n",
    "print(max_year)\n",
    "\n",
    "print(type(max_year))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#getting rid of the Ks in the value column\n",
    "\n",
    "def val_float(x):\n",
    "    if type(x) == float or type(x)== int:\n",
    "        return x #if it is a float or int, then keep as is\n",
    "    if 'k' in x:\n",
    "        if len(x) > 1 :\n",
    "            return float(x.replace('k', '')) * 1000\n",
    "        return 1000.0\n",
    "\n",
    "\n",
    "melted_df['gdp'] = melted_df['gdp'].apply(val_float)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x14de203d700>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = melted_df  # Assuming this contains the melted data\n",
    "\n",
    "#import style sheets \n",
    "externalstylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css'] # load the CSS stylesheet\n",
    "\n",
    "app = Dash(__name__, external_stylesheets = externalstylesheets)\n",
    "\n",
    "server = app.server\n",
    "\n",
    "# Define layout\n",
    "app.layout = html.Div([\n",
    "\n",
    "    # Title and description\n",
    "    html.Div([\n",
    "        html.H1('App for GDP in Countries from Year 1800 - 2100'),\n",
    "        html.P('Description: This is a dashboard that displays the GDP per capita of each country from the year 1800 to 2100. '\n",
    "               'The data tracks 195 countries throughout the years and their respective GDPs.'\n",
    "               'There is a dropdown and slider bar to select the country and years that you are interested in investigating.'\n",
    "               'The data does include years past the current date, which are meant to serve as estimations of future GDP.')\n",
    "    ]),\n",
    "\n",
    "    # Dropdown for countries\n",
    "    html.Div([\n",
    "            dcc.Dropdown(\n",
    "                options=[{'label': country, 'value': country} for country in df['country'].unique()],\n",
    "                value= ['Afghanistan', 'Angola', 'Albania'],\n",
    "                id='country-dropdown',\n",
    "                multi=True\n",
    "            ),\n",
    "    ]),\n",
    "\n",
    "    # Slider for years\n",
    "    html.Div([\n",
    "            dcc.RangeSlider(\n",
    "                min = min_year, \n",
    "                max = max_year, \n",
    "                step = 1, \n",
    "                value = [1800,1950], #default, note array notation\n",
    "                id = 'year-slider',\n",
    "                marks = {year: str(year) for year in range(1800, 2101, 10)} \n",
    "                    #marks is a dict that represents the numerical values and the labels\n",
    "                    #need to have a mark for everything from 1800 to 2100, thus make a for loop for each mark \n",
    "                ),\n",
    "    ], style={'width': '90%', 'margin': 'auto'}),  # Center the slider\n",
    "\n",
    "    # Graph\n",
    "    dcc.Graph(id='country-graph')\n",
    "])\n",
    "\n",
    "\n",
    "@app.callback(\n",
    "    Output('country-graph', 'figure'),\n",
    "    [Input('country-dropdown', 'value'),\n",
    "    Input('year-slider', 'value')]\n",
    ")\n",
    "def update_graph(selected_countries, selected_year):\n",
    "\n",
    "    #initialize the selected df from choices\n",
    "    selected_df = df\n",
    "\n",
    "    #if countries selected then filter for those rows\n",
    "    if selected_countries:\n",
    "        selected_df = selected_df[selected_df['country'].isin(selected_countries)]\n",
    "    #if year selected then filter --> need to convert to make year col all int so can compare against min&max\n",
    "    if selected_year:\n",
    "        min_year = selected_year[0]\n",
    "        max_year = selected_year[1]\n",
    "        selected_df = selected_df[(selected_df['year'].astype(int) >= min_year) & (selected_df['year'].astype(int) <= max_year)]\n",
    "\n",
    "    fig = px.line(selected_df, x='year', y='gdp', color='country')\n",
    "\n",
    "#update the layout\n",
    "    fig.update_layout(\n",
    "        xaxis_title='Year',\n",
    "        yaxis_title='GDP per capita',\n",
    "        legend_title='Country'\n",
    "    )\n",
    "\n",
    "    return fig\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ds4003",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
